openapi: 3.0.3
info:
  title: Finda API
  description: |
    Combined API documentation for Finda backend and chatbot. The Finda backend
    allows user authentication, product and service listings, ratings, search,
    etc., while the chatbot endpoint provides an AI-powered shopping assistant.
  version: 1.0.0
  contact:
    name: Finda API Support
    email: support@finda.com
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
servers:
  - url: https://finda-backend.onrender.com
    description: Production server
  - url: http://localhost:8000
    description: Local development
tags:
  - name: Auth
    description: Authentication endpoints
  - name: Products
    description: Product listing endpoints
  - name: Services
    description: Service listing endpoints
  - name: Ratings
    description: Product and service ratings
  - name: Stats
    description: User dashboard stats
  - name: Home
    description: Home page data
  - name: Search
    description: Search functionality
  - name: Filter
    description: Filter dropdown options
  - name: Categories
    description: Location categories
  - name: Chat
    description: Chatbot shopping assistant
paths:
  /categories:
    get:
      tags:
        - Categories
      summary: List all location categories
      responses:
        "200":
          description: A list of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
  /categories/{id}:
    get:
      tags:
        - Categories
      summary: Retrieve a single location category
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: A category object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  # Authentication Endpoints
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                first_name:
                  type: string
                last_name:
                  type: string
              required:
                - username
                - email
                - password
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Bad request (validation error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/login:
    post:
      tags:
        - Auth
      summary: Obtain authentication token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        "200":
          description: Token retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        "400":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/logout:
    post:
      tags:
        - Auth
      summary: Log out the current user
      security:
        - TokenAuth: []
      responses:
        "200":
          description: Logged out successfully
        "401":
          description: Unauthorized (invalid or missing token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/user:
    get:
      tags:
        - Auth
      summary: Get current user profile
      security:
        - TokenAuth: []
      responses:
        "200":
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "401":
          description: Unauthorized (invalid or missing token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Auth
      summary: Update current user profile
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                email:
                  type: string
                  format: email
      responses:
        "200":
          description: Profile updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Auth
      summary: Partially update current user profile
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                email:
                  type: string
                  format: email
      responses:
        "200":
          description: Profile updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/password-reset:
    post:
      tags:
        - Auth
      summary: Request password reset via email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required:
                - email
      responses:
        "200":
          description: Password reset email sent (if email is registered)
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/password-change:
    post:
      tags:
        - Auth
      summary: Change current user's password
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                old_password:
                  type: string
                new_password:
                  type: string
              required:
                - old_password
                - new_password
      responses:
        "200":
          description: Password changed successfully
        "400":
          description: Invalid input or incorrect old password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  # Statistics and Home
  /stats:
    get:
      tags:
        - Stats
      summary: Get user dashboard statistics
      security:
        - TokenAuth: []
      responses:
        "200":
          description: Statistics data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stats'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /home:
    get:
      tags:
        - Home
      summary: Get home page listings (promoted and latest products/services)
      parameters:
        - name: search
          in: query
          schema:
            type: string
        - name: category
          in: query
          schema:
            type: string
        - name: country
          in: query
          schema:
            type: string
        - name: state
          in: query
          schema:
            type: string
        - name: city
          in: query
          schema:
            type: string
        - name: rating
          in: query
          schema:
            type: number
      responses:
        "200":
          description: Home page data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HomePage'
  # Search and Filters
  /search:
    get:
      tags:
        - Search
      summary: Search products and services
      parameters:
        - name: q
          in: query
          schema:
            type: string
        - name: category
          in: query
          schema:
            type: string
        - name: location
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
  /filter-options:
    get:
      tags:
        - Filter
      summary: Retrieve filter dropdown options (categories, countries, etc)
      responses:
        "200":
          description: Filter option lists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilterOptions'
  # Products Endpoints
  /products:
    get:
      tags:
        - Products
      summary: List products (only published by default or filter via params)
      parameters:
        - name: product_category
          in: query
          schema:
            type: string
        - name: product_country
          in: query
          schema:
            type: string
        - name: product_state
          in: query
          schema:
            type: string
        - name: product_city
          in: query
          schema:
            type: string
        - name: product_status
          in: query
          schema:
            type: string
        - name: is_promoted
          in: query
          schema:
            type: boolean
        - name: user
          in: query
          schema:
            type: integer
        - name: search
          in: query
          schema:
            type: string
        - name: ordering
          in: query
          schema:
            type: string
        - name: my_products
          in: query
          schema:
            type: boolean
      responses:
        "200":
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      tags:
        - Products
      summary: Create a new product
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreate'
      responses:
        "201":
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - Products
      summary: Retrieve a product by ID
      responses:
        "200":
          description: Product detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Products
      summary: Update a product
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreate'
      responses:
        "200":
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Forbidden (not owner)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Products
      summary: Partially update a product
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreate'
      responses:
        "200":
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Products
      summary: Delete a product
      security:
        - TokenAuth: []
      responses:
        "204":
          description: Product deleted
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/{id}/promote:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    post:
      tags:
        - Products
      summary: Promote a product (mark as promoted)
      security:
        - TokenAuth: []
      responses:
        "200":
          description: Product promoted successfully
        "403":
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/my_products:
    get:
      tags:
        - Products
      summary: List products of current user
      security:
        - TokenAuth: []
      responses:
        "200":
          description: List of user's products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  # Services Endpoints
  /services:
    get:
      tags:
        - Services
      summary: List services
      parameters:
        - name: service_category
          in: query
          schema:
            type: string
        - name: service_country
          in: query
          schema:
            type: string
        - name: service_state
          in: query
          schema:
            type: string
        - name: service_city
          in: query
          schema:
            type: string
        - name: service_status
          in: query
          schema:
            type: string
        - name: is_promoted
          in: query
          schema:
            type: boolean
        - name: user
          in: query
          schema:
            type: integer
        - name: search
          in: query
          schema:
            type: string
        - name: ordering
          in: query
          schema:
            type: string
        - name: my_services
          in: query
          schema:
            type: boolean
      responses:
        "200":
          description: List of services
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
    post:
      tags:
        - Services
      summary: Create a new service
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceCreate'
      responses:
        "201":
          description: Service created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - Services
      summary: Retrieve a service by ID
      responses:
        "200":
          description: Service detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Services
      summary: Update a service
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceCreate'
      responses:
        "200":
          description: Service updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Services
      summary: Partially update a service
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceCreate'
      responses:
        "200":
          description: Service updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Services
      summary: Delete a service
      security:
        - TokenAuth: []
      responses:
        "204":
          description: Service deleted
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/{id}/promote:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    post:
      tags:
        - Services
      summary: Promote a service (mark as promoted)
      security:
        - TokenAuth: []
      responses:
        "200":
          description: Service promoted successfully
        "403":
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/my_services:
    get:
      tags:
        - Services
      summary: List services of current user
      security:
        - TokenAuth: []
      responses:
        "200":
          description: List of user's services
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  # Product Ratings (nested)
  /products/{product_pk}/ratings:
    parameters:
      - name: product_pk
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - Ratings
      summary: List ratings for a product
      responses:
        "200":
          description: List of ratings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductRating'
    post:
      tags:
        - Ratings
      summary: Create or update rating for a product
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_name:
                  type: string
                rating:
                  type: integer
                review:
                  type: string
              required:
                - rating
      responses:
        "201":
          description: Rating created or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductRating'
        "400":
          description: Bad request (invalid input)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/{product_pk}/ratings/{id}:
    parameters:
      - name: product_pk
        in: path
        required: true
        schema:
          type: integer
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - Ratings
      summary: Retrieve a specific product rating
      responses:
        "200":
          description: Rating detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductRating'
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Ratings
      summary: Update a product rating
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_name:
                  type: string
                rating:
                  type: integer
                review:
                  type: string
              required:
                - rating
      responses:
        "200":
          description: Rating updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductRating'
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Ratings
      summary: Partially update a product rating
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_name:
                  type: string
                rating:
                  type: integer
                review:
                  type: string
      responses:
        "200":
          description: Rating updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductRating'
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Ratings
      summary: Delete a product rating
      security:
        - TokenAuth: []
      responses:
        "204":
          description: Rating deleted
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  # Service Ratings (nested)
  /services/{service_pk}/ratings:
    parameters:
      - name: service_pk
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - Ratings
      summary: List ratings for a service
      responses:
        "200":
          description: List of ratings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceRating'
    post:
      tags:
        - Ratings
      summary: Create or update rating for a service
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_name:
                  type: string
                rating:
                  type: integer
                review:
                  type: string
              required:
                - rating
      responses:
        "201":
          description: Rating created or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceRating'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /services/{service_pk}/ratings/{id}:
    parameters:
      - name: service_pk
        in: path
        required: true
        schema:
          type: integer
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - Ratings
      summary: Retrieve a specific service rating
      responses:
        "200":
          description: Rating detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceRating'
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Ratings
      summary: Update a service rating
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_name:
                  type: string
                rating:
                  type: integer
                review:
                  type: string
              required:
                - rating
      responses:
        "200":
          description: Rating updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceRating'
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Ratings
      summary: Partially update a service rating
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_name:
                  type: string
                rating:
                  type: integer
                review:
                  type: string
      responses:
        "200":
          description: Rating updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceRating'
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Ratings
      summary: Delete a service rating
      security:
        - TokenAuth: []
      responses:
        "204":
          description: Rating deleted
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  # Payments Endpoints
  /payments/initiate:
    post:
      tags:
        - Payments
      summary: Initiate a payment via Paystack
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentInitiate'
      responses:
        "200":
          description: Payment initiation details (authorization URL, reference, amount)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentInitiateResponse'
        "400":
          description: Invalid request (e.g. already paid or invalid item)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /payments/verify:
    get:
      tags:
        - Payments
      summary: Verify a payment via Paystack
      parameters:
        - name: reference
          in: query
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Payment verification result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentVerifyResponse'
        "400":
          description: Missing or invalid reference
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  # Chatbot Endpoint
  /api/:
    post:
      tags:
        - Chat
      summary: Send a message to the chatbot
      description: |
        Send a message to the Finda shopping assistant chatbot. The bot will:
        1. Recognize user intent (greetings, queries, browsing, etc.)
        2. Search Finda's database for matching products/services
        3. Return top results by rating if found
        4. Offer external store suggestions if needed
        5. Use AI fallback for complex queries or no matches.
      operationId: sendChatMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                  description: The user's message to the chatbot
                  example: "I'm looking for Nike shoes"
                  minLength: 1
                  maxLength: 1000
      responses:
        "200":
          description: Successful response with bot reply
          content:
            application/json:
              schema:
                type: object
                properties:
                  reply:
                    type: string
                    description: The chatbot's response
                    example: "I found these on Finda:\n- Nike Air Max 270 — ₦45,000\n  Link: https://yourdomain.com/products/123/\n\nWould you also like suggestions from external stores?"
                examples:
                  greeting_response:
                    summary: Response to greeting
                    value:
                      reply: "Hello, welcome to Finda! What can we help you find today?"
                  product_found:
                    summary: Products found in database
                    value:
                      reply: "I found these on Finda:\n- Nike Air Max 270 — ₦45,000\n  Link: https://yourdomain.com/products/123/\n- Adidas Ultraboost — ₦52,000\n  Link: https://yourdomain.com/products/124/\n\nWould you also like suggestions from external stores (e.g., Amazon, Jumia)?"
                  browse_categories:
                    summary: Category browsing response
                    value:
                      reply: "Sure! Here are some categories you can explore:\n- Electronics\n- Fashion\n- Health & Beauty\n- Home & Garden\n\nOr just type in what you're looking for (e.g., 'Nike shoes', 'barber services')."
                  external_suggestions:
                    summary: External store suggestions
                    value:
                      reply: "Here are some external suggestions for running shoes:\n1. Amazon: Nike Revolution 5 - $65\n2. Jumia: Adidas Lite Racer - ₦35,000\n3. Konga: Puma Enzo 2 - ₦28,000"
                  thank_you_response:
                    summary: Response to thank you
                    value:
                      reply: "You're welcome! Let me know if you'd like to find anything else."
        "400":
          description: Bad request – empty or invalid message
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: "Please send a non-empty message."
components:
  securitySchemes:
    TokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: "Token-based auth (header `Authorization: Token <token>`)"
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
      required:
        - id
        - username
        - email
    Category:
      type: object
      properties:
        id:
          type: integer
        category:
          type: string
        state:
          type: string
        city:
          type: string
      required:
        - id
        - category
        - state
        - city
    ProductRating:
      type: object
      properties:
        id:
          type: integer
        user:
          type: integer
        user_details:
          $ref: '#/components/schemas/User'
        user_name:
          type: string
        rating:
          type: integer
        review:
          type: string
        created_at:
          type: string
          format: date-time
      required:
        - id
        - user
        - rating
    ServiceRating:
      type: object
      properties:
        id:
          type: integer
        user:
          type: integer
        user_details:
          $ref: '#/components/schemas/User'
        user_name:
          type: string
        rating:
          type: integer
        review:
          type: string
        created_at:
          type: string
          format: date-time
      required:
        - id
        - user
        - rating
    Product:
      type: object
      properties:
        id:
          type: integer
        user:
          type: integer
        user_details:
          $ref: '#/components/schemas/User'
        product_name:
          type: string
        product_image:
          type: string
          format: uri
        product_description:
          type: string
        product_price:
          type: number
        product_category:
          type: string
        product_country:
          type: string
        product_state:
          type: string
        product_city:
          type: string
        product_brand:
          type: string
        product_provider_phone:
          type: string
        product_status:
          type: string
        is_paid:
          type: boolean
        is_promoted:
          type: boolean
        promotion_fee:
          type: number
        average_rating:
          type: number
        rating_count:
          type: integer
        product_ratings:
          type: array
          items:
            $ref: '#/components/schemas/ProductRating'
        category_choices:
          type: array
          items:
            type: string
        country_choices:
          type: array
          items:
            type: string
        state_choices:
          type: array
          items:
            type: string
        city_choices:
          type: array
          items:
            type: string
        status_choices:
          type: array
          items:
            type: string
      required:
        - id
        - product_name
        - product_price
    ProductCreate:
      type: object
      properties:
        product_name:
          type: string
        product_image:
          type: string
          format: uri
        product_description:
          type: string
        product_price:
          type: number
        product_category:
          type: string
        product_country:
          type: string
        product_state:
          type: string
        product_city:
          type: string
        product_brand:
          type: string
        product_provider_phone:
          type: string
        is_promoted:
          type: boolean
      required:
        - product_name
        - product_price
        - product_category
        - product_country
        - product_state
        - product_city
        - product_provider_phone
    Service:
      type: object
      properties:
        id:
          type: integer
        user:
          type: integer
        user_details:
          $ref: '#/components/schemas/User'
        service_name:
          type: string
        service_image:
          type: string
          format: uri
        service_description:
          type: string
        service_category:
          type: string
        service_country:
          type: string
        service_state:
          type: string
        service_city:
          type: string
        service_provider_name:
          type: string
        service_provider_expertise:
          type: string
        service_provider_experience_year:
          type: integer
        service_provider_email:
          type: string
          format: email
        service_provider_phone:
          type: string
        service_status:
          type: string
        other_service_a:
          type: string
        other_service_b:
          type: string
        other_service_c:
          type: string
        is_paid:
          type: boolean
        is_promoted:
          type: boolean
        promotion_fee:
          type: number
        average_rating:
          type: number
        rating_count:
          type: integer
        service_ratings:
          type: array
          items:
            $ref: '#/components/schemas/ServiceRating'
        category_choices:
          type: array
          items:
            type: string
        country_choices:
          type: array
          items:
            type: string
        state_choices:
          type: array
          items:
            type: string
        city_choices:
          type: array
          items:
            type: string
        status_choices:
          type: array
          items:
            type: string
      required:
        - id
        - service_name
    ServiceCreate:
      type: object
      properties:
        service_name:
          type: string
        service_image:
          type: string
          format: uri
        service_description:
          type: string
        service_category:
          type: string
        service_country:
          type: string
        service_state:
          type: string
        service_city:
          type: string
        service_provider_name:
          type: string
        service_provider_expertise:
          type: string
        service_provider_experience_year:
          type: integer
        service_provider_email:
          type: string
          format: email
        service_provider_phone:
          type: string
        other_service_a:
          type: string
        other_service_b:
          type: string
        other_service_c:
          type: string
        is_promoted:
          type: boolean
      required:
        - service_name
        - service_category
        - service_country
        - service_state
        - service_city
        - service_provider_name
        - service_provider_expertise
        - service_provider_email
        - service_provider_phone
    Stats:
      type: object
      properties:
        total_products:
          type: integer
        published_products:
          type: integer
        pending_products:
          type: integer
        total_services:
          type: integer
        published_services:
          type: integer
        pending_services:
          type: integer
        total_product_ratings:
          type: integer
        total_service_ratings:
          type: integer
      required:
        - total_products
        - published_products
        - pending_products
        - total_services
        - published_services
        - pending_services
        - total_product_ratings
        - total_service_ratings
    HomePage:
      type: object
      properties:
        promoted_products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        promoted_services:
          type: array
          items:
            $ref: '#/components/schemas/Service'
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        services:
          type: array
          items:
            $ref: '#/components/schemas/Service'
        filter_options:
          type: object
          properties:
            categories:
              type: array
              items:
                type: string
            countries:
              type: array
              items:
                type: string
            states:
              type: array
              items:
                type: string
            cities:
              type: array
              items:
                type: string
        applied_filters:
          type: object
          properties:
            search:
              type: string
            category:
              type: string
            country:
              type: string
            state:
              type: string
            city:
              type: string
            rating:
              type: string
    SearchResponse:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        services:
          type: array
          items:
            $ref: '#/components/schemas/Service'
        total_results:
          type: integer
      required:
        - products
        - services
        - total_results
    FilterOptions:
      type: object
      properties:
        categories:
          type: array
          items:
            type: string
        countries:
          type: array
          items:
            type: string
        states:
          type: array
          items:
            type: string
        cities:
          type: array
          items:
            type: string
    PaymentInitiate:
      type: object
      properties:
        item_type:
          type: string
          enum: ["product", "service"]
        item_id:
          type: integer
      required:
        - item_type
        - item_id
    PaymentInitiateResponse:
      type: object
      properties:
        authorization_url:
          type: string
        reference:
          type: string
        amount:
          type: number
      required:
        - authorization_url
        - reference
        - amount
    PaymentVerifyResponse:
      type: object
      properties:
        detail:
          type: string
        item_type:
          type: string
          enum: ["product", "service"]
        item:
          anyOf:
            - $ref: '#/components/schemas/Product'
            - $ref: '#/components/schemas/Service'
    AuthToken:
      type: object
      properties:
        token:
          type: string
    Error:
      type: object
      properties:
        detail:
          type: string
